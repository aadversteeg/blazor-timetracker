@page "/projects/index"
@inject Core.Application.IProjectRepository repository
@inject NavigationManager navigationManager
@inject BlazorApp.Client.ProgramServices  services
@using Core.Extensions

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>
<input type="text" @bind="filter" />
<button class="btn btn-outline-secondary btn-sm" @onclick="UpdateProjects">Refresh</button>
<button class="btn btn-outline-secondary btn-sm" @onclick="ClearFilter">Clear</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Active</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td><a href="projects/update/@forecast.Name">@forecast.Name</a></td>
                    <td>@forecast.Active</td>
                    <td><button class="btn btn-sm btn-danger" @onclick="() => DeleteProject(forecast.Name)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="NewProject">New Project</button>

@code {
    private IReadOnlyCollection<Core.Application.Models.Project>? forecasts;
    private string? filter { get; set; }

    protected override Task OnInitializedAsync()
    {
        return UpdateProjects();
    }

    private void NewProject()
    {
        navigationManager.NavigateTo("/projects/insert");
    }

    async Task DeleteProject(string name)
    {
        bool confirmed = await services.Confirm( $"Deleting {name}. Are you sure?");
        if (confirmed)
        {
            await repository.Delete(name);
            forecasts = await repository.GetAll();
        }
    }

    private async Task UpdateProjects()
    {
        if(filter != null)
        {
            forecasts = (await repository.GetAll())
               .Where(p => p.Name.ContainsCaseInsensitive(filter) || p.Description.ContainsCaseInsensitive(filter))
               .ToList();
        }
        else
        {
            forecasts = await repository.GetAll();
        }
    }

    private Task ClearFilter()
    {
        filter = null;
        return UpdateProjects();
    }
}
